<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
/**
Input params:
Inspiration time (tInsp) cs
Expiration time  (tExp)  cs
Inspiration pause (pInsp)cs
Expiration pause  (pExp) cs
Flowrate 
FiO2
*/
const int tInsp=100;
const int tExp=300;
const int pInsp=20;
const int pExp=30;
const int totalT = tInsp + tExp + pInsp;

broadcast chan reset;
broadcast chan inspiration, expiration;
broadcast chan endSetup;
broadcast chan expOn, expOff;
int Q; // Int representation of q

    
// With scaling factor 10E4
const double PI = 3.141592;
const double d1 = 0.0254; // (m)
const double l1 = 3.0; // hose lenght 1 (m)
const double l2 = 0.3; // hose lenght 2 (m)
const double dt = 0.01; // (s)
const double w = 1.81E-5; // (Ns / m^2)

double q;
int v1 = 4250; // tank volume 1 (m^3)
int v2 = 1000;    // tank volume 2 (m^3)
int p1 = 10000; // initial pressure in tank 1 (Psi)
int p2 = 100; // initial pressure in tank 2 (Psi)

double delta, delta2;

double p2x = 6894.76;
double p1x = 68947.6;

int getQ(int p_i, int p_j, double l) {
    double foo = (p_i*6894.76)/100;
    double bar = (p_j*6894.76)/100;
    double div = l*128*w;
    if (div == 0) {
        div = 1;
    }
    return fint((PI * (foo-bar) * pow(d1,4)) / div);
}

int getDelta() {
//    p2x = p2x + (dt*q)/(1E-3);
//    delta = (100*dt*Q)/(1E-3);
//    delta2 = (dt*q)/(1E-3);
    return fint((100*dt*Q)/(6894.76*1E-3));
}

/**
Variables used when making the model SMC-compatible
see: UPPAAL-SMC tutorial (https://doi.org/10.1007/s10009-014-0361-y)
**/

int recvLoc=1;
clock timeExpV;
</declaration>
	<template>
		<name x="5" y="5">Setup</name>
		<parameter>int[0,500] &amp;airflow, int[1,10] &amp;FiO2, int[0,100] &amp;dutyAir,int[0,100] &amp;dutyO2</parameter>
		<declaration>/**
Injector workcycle configuration
flowrate: Required flow ([L^3 T^-1]; given in liters per minute )
FiO2: Fraction of inspirated oxygen, given in percentage of oxygen in the air
Duty: The opening of the injector's valve, where 100 is fully opened and 0 is fully closed.
**/
int[0,500] flowrate;
int[0,500] o2WithoutAir;


/**

            
The following table matches the duty for a given flowrate. e.g. if a flowrate of 220 is required,
the injectors should open 40%.
This data was provided by profs. José I. García and Andrés M. Valencia. It was acquired experimentally and  
it is specific to injectors of the the mechanical ventilator featured in the article.

|flowrate|duty (%) |
--------------------
| 120    | 30      |
| 220    | 40      |
| 280    | 50      |
| 350    | 60      |
| 380    | 70      |
| 410    | 80      |
| 450    | 90      |
| 500    | 100     |

These points could be extrapolated with a 2nd grade polynomial
f(x) = 0,0001x^2+0,1441x+3,6656
**/

int getDuty(int flow){
    return  (flow &lt;= 120)?
    30:
    (flow &lt;= 220)?
    40:
    (flow &lt;= 280)?
    50:
    (flow &lt;= 350)?
    60:
    (flow &lt;= 380)?
    70:
    (flow &lt;= 410)?
    80:
    (flow &lt;= 450)?
    90:
    100; //more than 450, expected until 500
}




        </declaration>
		<location id="id0" x="-68" y="17">
			<committed/>
		</location>
		<location id="id1" x="153" y="17">
			<committed/>
		</location>
		<location id="id2" x="365" y="17">
			<label kind="exponentialrate" x="391" y="25">1</label>
			<committed/>
		</location>
		<location id="id3" x="552" y="17">
			<committed/>
		</location>
		<location id="id4" x="552" y="144">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="238" y="153">reset?</label>
			<nail x="-68" y="144"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="561" y="59">recvLoc==1</label>
			<label kind="synchronisation" x="561" y="34">endSetup!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="391" y="-59">dutyAir=getDuty(o2WithoutAir),
dutyO2=getDuty(flowrate)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="144" y="42">flowrate=fint(round(Q*FiO2/100)),
o2WithoutAir=Q-flowrate</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-42" y="-34">Q=airflow</label>
		</transition>
	</template>
	<template>
		<name>Control</name>
		<parameter>int pInsp, int pExp, int tInsp, int tExp,  int totalT, broadcast chan &amp;O2mixed,  broadcast chan  &amp;O2on,  broadcast chan &amp;O2Off,  broadcast chan &amp;airMixed,  broadcast chan  &amp;airOn,  broadcast chan &amp;airOff, broadcast chan &amp;mix</parameter>
		<declaration>clock a, pause;</declaration>
		<location id="id5" x="-204" y="-756">
			<name x="-187" y="-790">Start</name>
			<label kind="invariant" x="-187" y="-765">a&lt;=1</label>
		</location>
		<location id="id6" x="-204" y="-408">
			<name x="-214" y="-442">mid</name>
			<urgent/>
		</location>
		<location id="id7" x="8" y="-408">
			<name x="33" y="-425">openInsp</name>
			<label kind="invariant" x="25" y="-408">pause&lt;=1</label>
		</location>
		<location id="id8" x="8" y="-110">
			<name x="25" y="-119">Insp</name>
			<urgent/>
		</location>
		<location id="id9" x="195" y="-408">
			<name x="212" y="-425">InsPause</name>
			<label kind="invariant" x="212" y="-408">pause&lt;=pInsp</label>
		</location>
		<location id="id10" x="-408" y="-408">
			<name x="-485" y="-425">openExp</name>
			<label kind="invariant" x="-484" y="-399">pause&lt;=1</label>
		</location>
		<location id="id11" x="-408" y="-110">
			<name x="-451" y="-118">Exp</name>
			<urgent/>
		</location>
		<location id="id12" x="-578" y="-399">
			<name x="-671" y="-416">ExpPause</name>
			<label kind="invariant" x="-680" y="-391">pause&lt;=pExp</label>
		</location>
		<location id="id13" x="-246" y="-680">
			<urgent/>
		</location>
		<location id="id14" x="-153" y="-680">
			<urgent/>
		</location>
		<location id="id15" x="-204" y="-603">
			<label kind="exponentialrate" x="-187" y="-603">1</label>
		</location>
		<location id="id16" x="-263" y="-527">
			<label kind="invariant" x="-273" y="-510">1</label>
		</location>
		<location id="id17" x="-144" y="-527">
			<label kind="invariant" x="-154" y="-510">1</label>
		</location>
		<location id="id18" x="-204" y="-833">
			<name x="-214" y="-867">Setup</name>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="assignment" x="-399" y="-263">Q=getQ(0,p2,l2),
p2=p2+getDelta()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-187" y="-824">endSetup?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-153" y="-501">O2mixed?</label>
			<label kind="assignment" x="-170" y="-467">a=0</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-323" y="-493">airMixed?</label>
			<label kind="assignment" x="-263" y="-467">a=0</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-170" y="-586">airMixed?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-297" y="-586">O2mixed?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-161" y="-654">O2on!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-280" y="-654">airOn!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id14"/>
			<label kind="guard" x="-170" y="-748">a==1</label>
			<label kind="synchronisation" x="-170" y="-731">airOn!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id13"/>
			<label kind="guard" x="-263" y="-756">a==1</label>
			<label kind="synchronisation" x="-272" y="-731">O2on!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-110" y="-297">a&lt;tInsp</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id6"/>
			<label kind="guard" x="-314" y="-136">a&lt;totalT</label>
			<nail x="-204" y="-110"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id6"/>
			<label kind="guard" x="-586" y="-476">pause==pExp</label>
			<label kind="assignment" x="-476" y="-501">a=0</label>
			<nail x="-425" y="-493"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-595" y="-314">a&gt;=totalT</label>
			<label kind="synchronisation" x="-578" y="-272">expOff!</label>
			<label kind="assignment" x="-552" y="-246">pause=0,
Q=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="guard" x="-314" y="-408">a&gt;tInsp</label>
			<label kind="synchronisation" x="-382" y="-425">expOn!</label>
			<label kind="assignment" x="-390" y="-408">pause=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="17" y="-510">pause==pInsp</label>
			<nail x="8" y="-484"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="110" y="-272">a&gt;=tInsp</label>
			<label kind="assignment" x="110" y="-246">pause=0,
Q=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="17" y="-348">Q=getQ(p1,p2,l1),
p2=p2+getDelta()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-102" y="-433">a&lt;=tInsp</label>
			<label kind="assignment" x="-127" y="-408">pause=0</label>
		</transition>
	</template>
	<template>
		<name>MixChamber</name>
		<parameter> broadcast chan &amp;mixed,  broadcast chan  &amp;turnOn,  broadcast chan &amp;turnOff, int[0,100] &amp;duty,  broadcast chan &amp;finConfiguracion, int &amp;mix</parameter>
		<declaration>clock time;

/**
Using the inverse of the flowrate vs. duty table

| duty     | flow   |
---------------------
|    30    |   120  |
|    40    |   220  |
|    50    |   280  |
|    60    |   350  |
|    70    |   380  |
|    80    |   410  |
|    90    |   450  |
|    100   |   500  |

and by completing low values with the extrapolated function

| duty     | flow   |
---------------------
|    00    |   0    |
|    10    |   50   |
|    20    |   100  |

**/
int params[11] = {0,50,100,120,220,280,350,380,410,450,500};

int getFlowWithPassage(int n){
    return params[n/10];
}</declaration>
		<location id="id19" x="161" y="8">
			<name x="136" y="25">off</name>
		</location>
		<location id="id20" x="382" y="8">
			<name x="374" y="25">on</name>
			<label kind="invariant" x="365" y="42">time&lt;=tInsp</label>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="187" y="110">time==tInsp</label>
			<label kind="synchronisation" x="187" y="127">mixed!</label>
			<label kind="assignment" x="187" y="144">mix=getFlowWithPassage(duty)</label>
			<nail x="263" y="110"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="246" y="-102">turnOff?</label>
			<label kind="assignment" x="246" y="-85">time=0</label>
			<nail x="272" y="-68"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="246" y="17">turnOn?</label>
			<label kind="assignment" x="246" y="34">time=0</label>
		</transition>
	</template>
	<template>
		<name>ExpValve</name>
		<parameter> broadcast chan &amp;done, int &amp;mix</parameter>
		<location id="id21" x="0" y="0">
			<name x="-42" y="-8">off</name>
		</location>
		<location id="id22" x="221" y="0">
			<name x="238" y="-8">on</name>
			<label kind="invariant" x="211" y="17">timeExpV&lt;=tExp</label>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="85" y="-136">expOff?</label>
			<label kind="assignment" x="85" y="-119">timeExpV=0,
mix=0</label>
			<nail x="110" y="-76"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="68" y="0">expOn?</label>
			<label kind="assignment" x="68" y="17">timeExpV=0</label>
		</transition>
	</template>
	<system>/**
Injector workcycle configuration
flowrate: Required flow ([L^3 T^-1]; given in liters per minute )
FiO2: Fraction of inspirated oxygen, given in percentage of oxygen in the air
**/
int[0,500] flowrate = 500;
int[1,10] FiO2 = 10;

/**
Duty: The opening of the injector's valve, where 100 is fully opened and 0 is fully closed.
**/
int[0,100] airDuty;
int[0,100] o2Duty;

/**
channel to notify when injectors are configured and ready
**/
broadcast chan configDone;

//flowrate, FiO2, inputs
//airDuty, o2Duty, outputs
config = Setup(flowrate, FiO2, airDuty, o2Duty);

broadcast chan turnO2On; 
broadcast chan turnAirOn;
broadcast chan turnO2Off; 
broadcast chan turnAirOff;

int mix=0;

broadcast chan O2Mixed;
broadcast chan airMixed;

o2Valve = MixChamber(O2Mixed, turnO2On, turnO2Off, o2Duty, configDone, mix);
airValve = MixChamber(airMixed, turnAirOn, turnAirOff, airDuty, configDone, mix);

/**
expiration valve
**/
broadcast chan mixExpired;
broadcast chan turnExpValveOn;
broadcast chan turnExpValveOff;

expValve = ExpValve(mixExpired, mix);

Ventilator = Control(pInsp,pExp,tInsp,tExp, totalT, O2Mixed, turnO2On, turnO2Off, airMixed, turnAirOn, turnAirOff, mixExpired);

system  config, o2Valve, airValve, expValve, Ventilator;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>At every stage, at least one transition will be eventually enabled. 
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.Insp</formula>
			<comment>It is possible to reach the inspiration state.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.Exp</formula>
			<comment>It is possible to reach the expiration state.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.ExpPause</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.InsPause</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (not (o2Valve.on or airValve.on) or expValve.off)</formula>
			<comment>If there is an inspiration injector on, then the expiration valve is closed.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; o2Valve.on or airValve.on</formula>
			<comment>It is possible to reach states where injectors are on. 
This property also verifies that the previous property has a possible antecedent.</comment>
		</query>
		<query>
			<formula>A[] (not expValve.on or (o2Valve.off and airValve.off))</formula>
			<comment>For every path, if the expiration valve is on, both injectors
must be off.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; expValve.on</formula>
			<comment>It is possible to reach a state where the expiration valve
is on. This property also verifies that the previous property
has a possible antecedent.</comment>
		</query>
		<query>
			<formula>A[] (not expValve.on or (timeExpV&lt;=tExp))</formula>
			<comment>The expiration valve never lasts more than the configured
duration for the expiration phase (tExp) turned on</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(expValve.on and timeExpV &gt; tExp)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (not (o2Valve.on and airValve.on) or not(o2Valve.time&gt;tInsp))</formula>
			<comment>The oxygen and air injectors are never on for more than
the configured inspiration time (tInsp).</comment>
		</query>
		<query>
			<formula>simulate[Ventilator.a&lt;=totalT*2]{Q}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[Ventilator.a &lt;= tInsp](&lt;&gt; Ventilator.Exp)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Ventilator.Exp and Ventilator.a&lt;=tInsp)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[Ventilator.a &lt;= totalT*5](&lt;&gt;Ventilator.ExpPause)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;(Ventilator.ExpPause and Ventilator.a &lt; totalT)</formula>
			<comment>Is it possible to reach the expiratory pause before totalT? (Safety property, should be false).</comment>
		</query>
	</queries>
</nta>
