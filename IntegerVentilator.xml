<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

    /**
    Input params:
    Inspiration time (tInsp) cs
    Expiration time  (tExp)  cs
    Inspiration pause (pInsp)cs
    Expiration pause  (pExp) cs
    Flowrate 
    FiO2
    */
    int tInsp;
    int tExp;
    int pInsp;
    int pExp;
    int totalT;


        int psi;
         chan reset;
         chan resetExp;
         chan inspirar, espirar;
         chan endSetup;
         chan expOn, expOff;
        int Q; // Int representation of q
        /**sefsefse
        Tendremos dos inyectores, uno de aire y uno de oxigeno
        Cada inyector tiene un dato tipo bool que indica si está encendido o no: isOn
        Además un entero que indica el caudal que circulará

        **/
        typedef struct {
        bool isOn;
        int caudal;
        } Inyector;
    
// Factor de escalad 10E4
const double PI = 3.141592;
const double d1 = 0.0254; // m
const double l1 = 3.0; // longitud mangera 1 m
const double l2 = 0.3; // longitud mangera 2 m
const double dt = 0.01; // s
const double w = 1.81E-5; // Ns / m^2

double q;
int v1 = 4250; // volumen del tanque 1 m^3
int v2 = 1000;    // volumen del tanque 2 m^3
int p1 = 10000; // Presion inicial del tanque 1 Psi
int p2 = 100; // Presion inicial del tanque 2 Psi
int correct;
double delta, delta2;

double p2x = 6894.76;
double p1x = 68947.6;

int getQ(int p_i, int p_j, double l) {
    double foo = (p_i*6894.76)/100;
    double bar = (p_j*6894.76)/100;
    double div = l*128*w;
    if (div == 0) {
        div = 1;
    }
    return fint((PI * (foo-bar) * pow(d1,4)) / div);
}

int getDelta() {
//    p2x = p2x + (dt*q)/(1E-3);
//    delta = (100*dt*Q)/(1E-3);
//    delta2 = (dt*q)/(1E-3);
    return fint((100*dt*Q)/(6894.76*1E-3));
}</declaration>
	<template>
		<name x="5" y="5">Setup</name>
		<parameter>int[0,100] &amp;dutyAir,int[0,100] &amp;dutyO2</parameter>
		<declaration>// Place local declarations here.
            /**
            Configuración de ciclos de trabajo de los inyectores
            flowrate: Es el caudal requerido ([L^3 T^-1]; dado en litros por minuto )
            FiO2: Fracción de oxígeno inspirado, dado en porcentaje de oxigeno en el aire
            **/
            int[0,500] flowrate;
            int[0,500] o2WithoutAir;
            int[1,10] FiO2;

            /**
            De acuerdo a la siguiente tabla

            |  x  |  y  |
            ------------
            | 120 | 30  |
            | 220 | 40  |
            | 280 | 50  |
            | 350 | 60  |
            | 380 | 70  |
            | 410 | 80  |
            | 450 | 90  |
            | 500 | 100 |

            Se construye una función para extrapolar los valores, dicha función es de grado 2 debido al desbordamiento de int
            teniendo f(x) = 0,0001x^2+0,1441x+3,6656
            **/

            int getDuty(int x){
            return  (x&lt;=120)?
            30:
            (x&lt;=220)?
            40:
            (x&lt;=280)?
            50:
            (x&lt;=350)?
            60:
            (x&lt;=380)?
            70:
            (x&lt;=410)?
            80:
            (x&lt;=450)?
            90:
            100; //more than 450, expected until 500

            }




        </declaration>
		<location id="id0" x="76" y="-34">
			<committed/>
		</location>
		<location id="id1" x="297" y="-34">
			<committed/>
		</location>
		<location id="id2" x="509" y="-34">
			<label kind="exponentialrate" x="535" y="-26">1</label>
			<committed/>
		</location>
		<location id="id3" x="696" y="-34">
			<committed/>
		</location>
		<location id="id4" x="697" y="93">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="382" y="102">reset?</label>
			<nail x="76" y="93"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="select" x="731" y="-51">pause:int[0,3],
ins:int[100,200]</label>
			<label kind="synchronisation" x="612" y="42">endSetup!</label>
			<label kind="assignment" x="739" y="25">tInsp=ins,
tExp=ins*3,
pInsp=pause*10,
pExp=pause*30</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="535" y="-93">dutyAir=getDuty(o2WithoutAir),
dutyO2=getDuty(flowrate)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="288" y="-9">flowrate=fint(round(Q*FiO2/100)),
o2WithoutAir=Q-flowrate</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="93" y="-127">j:int[1,5],
fio2:int[1,10]</label>
			<label kind="assignment" x="93" y="-85">Q=j*10,
FiO2=fio2</label>
		</transition>
	</template>
	<template>
		<name>Control</name>
		<parameter>chan &amp;O2mixed,  chan  &amp;O2on,  chan &amp;O2Off,  chan &amp;airMixed,  chan  &amp;airOn,  chan &amp;airOff, broadcast chan &amp;expi</parameter>
		<declaration>clock a,pause;</declaration>
		<location id="id5" x="-204" y="-756">
			<name x="-255" y="-765">Start</name>
			<label kind="invariant" x="-187" y="-765">a&lt;=1</label>
		</location>
		<location id="id6" x="-204" y="-408">
			<urgent/>
		</location>
		<location id="id7" x="8" y="-408">
			<name x="33" y="-425">openInsp</name>
			<label kind="exponentialrate" x="25" y="-417">1</label>
		</location>
		<location id="id8" x="8" y="-110">
			<name x="25" y="-119">Insp</name>
			<urgent/>
		</location>
		<location id="id9" x="195" y="-408">
			<name x="212" y="-425">InsPause</name>
			<label kind="invariant" x="212" y="-408">pause&lt;=pInsp</label>
		</location>
		<location id="id10" x="-408" y="-408">
			<name x="-485" y="-425">openExp</name>
			<label kind="exponentialrate" x="-391" y="-408">1</label>
		</location>
		<location id="id11" x="-408" y="-110">
			<name x="-451" y="-118">Exp</name>
			<urgent/>
		</location>
		<location id="id12" x="-578" y="-399">
			<name x="-654" y="-408">ExpPause</name>
			<label kind="invariant" x="-671" y="-391">pause&lt;=pExp</label>
		</location>
		<location id="id13" x="-246" y="-680">
			<urgent/>
		</location>
		<location id="id14" x="-153" y="-680">
			<urgent/>
		</location>
		<location id="id15" x="-204" y="-603">
		</location>
		<location id="id16" x="-263" y="-527">
		</location>
		<location id="id17" x="-144" y="-527">
		</location>
		<location id="id18" x="-204" y="-850">
			<name x="-214" y="-884">Setup</name>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-399" y="-306">expi?</label>
			<label kind="assignment" x="-399" y="-280">Q=getQ(0,p2,l2),
p2=p2+getDelta()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-195" y="-816">endSetup?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-153" y="-501">O2mixed?</label>
			<label kind="assignment" x="-170" y="-467">a=0</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-323" y="-493">airMixed?</label>
			<label kind="assignment" x="-263" y="-467">a=0</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-170" y="-586">airMixed?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-297" y="-586">O2mixed?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-161" y="-654">O2on!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-280" y="-654">airOn!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id14"/>
			<label kind="guard" x="-170" y="-748">a==1</label>
			<label kind="synchronisation" x="-170" y="-731">airOn!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id13"/>
			<label kind="guard" x="-255" y="-748">a==1</label>
			<label kind="synchronisation" x="-272" y="-731">O2on!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-110" y="-297">a&lt;tInsp</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id6"/>
			<label kind="guard" x="-348" y="-136">a&lt;totalT</label>
			<nail x="-204" y="-110"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id6"/>
			<label kind="guard" x="-663" y="-476">a&gt;=totalT &amp;&amp; pause==pExp</label>
			<label kind="assignment" x="-476" y="-501">a=0</label>
			<nail x="-425" y="-493"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-586" y="-297">a&gt;=totalT</label>
			<label kind="synchronisation" x="-569" y="-272">expOff!</label>
			<label kind="assignment" x="-552" y="-246">pause=0,
Q=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="guard" x="-306" y="-425">a&gt;tInsp</label>
			<label kind="synchronisation" x="-374" y="-425">expOn!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="42" y="-493">a&gt;=tInsp+pInsp &amp;&amp; pause==pInsp</label>
			<nail x="8" y="-484"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="110" y="-272">a&gt;=tInsp</label>
			<label kind="assignment" x="110" y="-246">pause=0,
Q=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="17" y="-348">Q=getQ(p1,p2,l1),
p2=p2+getDelta()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-102" y="-433">a&lt;=tInsp</label>
		</transition>
	</template>
	<template>
		<name>MixChamber</name>
		<parameter> chan &amp;mixed,  chan  &amp;turnOn,  chan &amp;turnOff, int[0,100] &amp;duty,  chan &amp;finConfiguracion, int &amp;mix</parameter>
		<declaration>clock time;

            /**
            De acuerdo a la siguiente tabla

            | apertura | caudal |
            ---------------------
            |    30    |   120  |
            |    40    |   220  |
            |    50    |   280  |
            |    60    |   350  |
            |    70    |   380  |
            |    80    |   410  |
            |    90    |   450  |
            |    100   |   500  |

            Adicionales para completar las posibilidades con el duty de 30%
            | apertura | caudal |
            ---------------------
            |    00    |   120  |
            |    10    |   120  |
            |    20    |   120  |

            **/
            int params[11] = {120,120,120,120,220,280,350,380,410,450,500};

            int getFlowWithPassage(int n){
                return params[n/10];
            }</declaration>
		<location id="id19" x="161" y="8">
			<name x="136" y="25">off</name>
		</location>
		<location id="id20" x="382" y="8">
			<name x="374" y="25">on</name>
			<label kind="invariant" x="365" y="42">time&lt;=tInsp</label>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="187" y="110">time==tInsp</label>
			<label kind="synchronisation" x="187" y="127">mixed!</label>
			<label kind="assignment" x="187" y="144">mix=getFlowWithPassage(duty)</label>
			<nail x="263" y="110"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="246" y="-102">turnOff?</label>
			<label kind="assignment" x="246" y="-85">time=0</label>
			<nail x="272" y="-68"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="246" y="17">turnOn?</label>
			<label kind="assignment" x="246" y="34">time=0</label>
		</transition>
	</template>
	<template>
		<name>ExpValve</name>
		<parameter> broadcast chan &amp;done, int &amp;mix</parameter>
		<declaration>clock time;</declaration>
		<location id="id21" x="0" y="0">
			<name x="-42" y="-8">off</name>
		</location>
		<location id="id22" x="221" y="0">
			<name x="238" y="-8">on</name>
			<label kind="invariant" x="238" y="8">time&lt;=tExp</label>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="17" y="93">resetExp?</label>
			<label kind="assignment" x="18" y="76">time=0</label>
			<nail x="221" y="76"/>
			<nail x="0" y="76"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="195" y="-85">done!</label>
			<label kind="assignment" x="195" y="-68">mix=0</label>
			<nail x="195" y="-42"/>
			<nail x="246" y="-42"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="68" y="-170">time==tExp</label>
			<label kind="synchronisation" x="76" y="-153">expOff?</label>
			<label kind="assignment" x="76" y="-144">time=0</label>
			<nail x="110" y="-76"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="68" y="0">expOn?</label>
			<label kind="assignment" x="68" y="17">time=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
        

        /**
        Configuración de ciclos de trabajo de los inyectores
        flowrate: Es el caudal requerido ([L^3 T^-1]; dado en litros por minuto ) en un Dominio [0,500]
        FiO2: Fracción de oxígeno inspirado, dado en porcentaje de oxigeno en el aire en un Dominio [0,100]

        **/
        int[0,500] flowrate=500;
        int[1,10] FiO2=10;
        int[0,100] airDuty;
        int[0,100] o2Duty;


        /**
        Notificación de parte del configurador de inyectores al controlador de que están listos a través del canal finConfiguracion
        **/
         chan finConfiguracion;


        configuracion = Setup(airDuty, o2Duty);



        /**
        Regular mezcla

        **/

        /**
        Inyector inyectorOxigeno={false, 0};
        Inyector inyectorAire={false, 0};
        **/

        chan encenderOxigeno;
        chan encenderAire;
        chan apagarOxigeno;
         chan apagarAire;

        int mezcla=0;

         chan oxigenoMezclado;
         chan aireMezclado;

        o2Valve = MixChamber(oxigenoMezclado, encenderOxigeno, apagarOxigeno, o2Duty, finConfiguracion, mezcla);
        airValve =MixChamber(aireMezclado, encenderAire, apagarAire, airDuty, finConfiguracion, mezcla);



        /**
        Valvula para expirar

        **/

         broadcast chan mezclaEspirada;
         chan encenderValvula;
         chan apagarValvula;

        expValve = ExpValve(mezclaEspirada, mezcla);

        //ventilator = General(finConfiguracion, oxigenoMezclado, encenderOxigeno, apagarOxigeno, aireMezclado, encenderAire, apagarAire, mezclaEspirada, encenderValvula, apagarValvula);
        Ventilator = Control(oxigenoMezclado, encenderOxigeno, apagarOxigeno, aireMezclado, encenderAire, apagarAire, mezclaEspirada);
        // List one or more processes to be composed into a system.
        system  configuracion, o2Valve, airValve, expValve, Ventilator;
        //system TestProcess;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Siempre habrán transiciones desde alguna locacion para realizar</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.Insp</formula>
			<comment>Es posible alcanzar el estado de inspiracion</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.Exp</formula>
			<comment>Es posible alcanzar el estado de espiracion correcto</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.ExpPause</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Ventilator.InsPause</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (not (o2Valve.on or airValve.on) or expValve.off)</formula>
			<comment>Para todos los paths. Algún inyector encendido implica que la valvula de espiración está apagado</comment>
		</query>
		<query>
			<formula>E&lt;&gt; o2Valve.on or airValve.on</formula>
			<comment>Es posible alcanzar estados donde los inyectores estén encendidos. La propiedad verifica también que la propiedad anterior es una implicación donde el antecedente es posible</comment>
		</query>
		<query>
			<formula>A[] (not expValve.on or (o2Valve.off and airValve.off))</formula>
			<comment>Para todos los paths. La valvula de espiración encendida implica que ambos inyectores (oxigeno y aire) están apagados</comment>
		</query>
		<query>
			<formula>E&lt;&gt; expValve.on</formula>
			<comment>Es posible alcanzar estados donde la valvula de espiración esté encendida. La propiedad verifica también que la propiedad anterior es una implicación donde el antecedente es posible</comment>
		</query>
		<query>
			<formula>A[] (not expValve.on or not(expValve.time&gt;tExp))</formula>
			<comment>La valvula de espiración nunca está encendida por más de 200 centisegundos</comment>
		</query>
		<query>
			<formula>A[] (not (o2Valve.on and airValve.on) or not(o2Valve.time&gt;tInsp))</formula>
			<comment>Los inyectores de aire y oxigeno para inspiración nunca están encendidos por más de 300 centisegundos</comment>
		</query>
	</queries>
</nta>
